openapi: '3.0.2'
info:
  title: WASAPhoto
  description: |-
    This is Davide Marincione's API for his WASAPhoto implementation
  version: '1.0.0'
servers:
  - url: http://localhost/
components:
  schemas:
    userId:
      title: User identifier
      description: A user's id
      type: integer
      example: 90635441
      format: int64
    userName:
      title: User name
      description: regex definition of an acceptable username
      type: string
      example: Maria
      pattern: '^.*?$'
      minLength: 3
      maxLength: 16
    user:
      title: User representation
      description: A complete representation of the whole user resource
      type: object
      properties:
        id:
          description: The user's unique identifier
          $ref: "#/components/schemas/userId"
        name:
          description: The user's name
          $ref: "#/components/schemas/userName"
    photo:
      title: Photo representation
      description: How a photo is represented in this application
      type: string
      format: binary
      maxLength: 52428800 # 50 MiB
      # TODO:
      #   1- add maximum length (?)
      #   2- IF above, add ability to combine multiple photos
      #     to get arbitrarily sized images
    postTitle:
      title: Post title
      example: A curious title
      type: string
      minLength: 4
      maxLength: 64
    postId:
      title: Post identifier
      example: 123456
      type: integer
      format: int64
    post:
      title: Photo post
      description: A user's photo post
      type: object
      properties:
        id:
          $ref: "#/components/schemas/postId"
        date:
          type: string
          format: date-time
        photo:
          $ref: "#/components/schemas/photo"
        title:
          $ref: "#/components/schemas/postTitle"
      
paths:
  /users:
    post:
      tags: ["login"]
      summary: Logs in the user
      description: |-
        If the user does not exist, it will be created,
        and an identifier is returned.
        If the user exists, the user identifier is returned.
      operationId: doLogin
      parameters:
        - in: query
          name: username
          schema:
            $ref: "#/components/schemas/userName"
          required: true
      responses:
        '200':
          description: User log-in action successful
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/userId"
        '201':
          description: User log-in (registration) action successful
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/userId"
        '400':
          description: Unacceptable username
  /users/{userId}:
    parameters:
      - in: path
        name: userId
        schema:
          $ref: "#/components/schemas/userId"
        required: true
    put:
      tags: ["user"]
      summary: Modify username
      description: |-
        Modifies the user name
      operationId: setMyUserName
      parameters:
        - in: query
          name: username
          schema:
            $ref: "#/components/schemas/userName"
          required: true
      responses:
        '200':
          description: Username change successfull
        '400':
          description: Unacceptable username
        '404':
          description: User not found
    get:
      tags: ["user"]
      summary: Get user
      description: |-
        Requests a user's profile
      operationId: getUserProfile
      responses:
        '200':
          description: Returning user's profile
          # TODO: return the user and all of his posts
        '404':
          description: User not found
# I'm not at all happy about the current state of ban and follow lists.
#   A post/delete request should create/delete resources, but in this case
#   I am using it them to update lists. Unfortunately though I have no idea how to
#   change this since I have to explicitely provide the operationId's for those
#   (not to mention that providing everything under a "patch" request for the user
#   seems a bit unwieldy).
  /users/{userId}/followed-users/{otherId}:
    parameters:
      - in: path
        name: userId
        schema:
          $ref: "#/components/schemas/userId"
        required: true
      - in: path
        name: otherId
        schema:
          $ref: "#/components/schemas/userId"
        required: true
    put:
      tags: ["follow"]
      summary: Follow user
      description: |-
        Follows user if it is not followed (cannot follow self)
      operationId: followUser
      responses:
        '200':
          description: Successful addition
        '404':
          description: User not found
        '406':
          description: Other user not found
        '409':
          description: Cannot follow self
    delete:
      tags: ["follow"]
      summary: Un-follow user
      description: |-
        Un-follows user if it is followed
      operationId: unfollowUser
      responses:
        '200':
          description: Successful removal
        '404':
          description: User not found
  /users/{userId}/banned-users/{otherId}:
    parameters:
      - in: path
        name: userId
        schema:
          $ref: "#/components/schemas/userId"
        required: true
      - in: path
        name: otherId
        schema:
          $ref: "#/components/schemas/userId"
        required: true
    put:
      tags: ["ban"]
      summary: Ban user
      description: |-
        Bans user if it is not yet banned (cannot ban self)
      operationId: banUser
      responses:
        '200':
          description: Successful addition
        '404':
          description: User not found
        '406':
          description: Other user not found
        '409':
          description: Cannot ban self
    delete:
      tags: ["ban"]
      summary: Un-ban user
      description: |-
        Un-bans user if it is banned
      operationId: unbanUser
      responses:
        '200':
          description: Successful removal
        '404':
          description: User not found
  /users/{userId}/posts:
    parameters:
    - in: path
      name: userId
      schema:
        $ref: "#/components/schemas/userId"
      required: true
    post:
      tags: ["post"]
      summary: Post a post
      description: |-
        Add a post to the user's page
      operationId: uploadPhoto
      parameters:
        - in: header
          name: post
          schema:
            type: object
            properties:
              title:
                $ref: "#/components/schemas/postTitle"
              photo:
                $ref: "#/components/schemas/photo"
          required: true
      responses:
        '201':
          description: Successful post
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/postId"
        '413':
          description: Photo is too big!
        '500':
          description: The server is wrong somehow
        '404':
          description: User not found