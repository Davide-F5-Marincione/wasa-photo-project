openapi: '3.0.2'
info:
  title: WASAPhoto
  description: |-
    This is Davide Marincione's API for his WASAPhoto implementation
  version: '1.1.4'
servers:
  - url: http://localhost
tags:
  - name: user
    description: All the stuff related to the user/s
  - name: stream
    description: All the stuff related to the stream
  - name: photo
    description: All the stuff related to photos
components:
  securitySchemes:
    bearerAuth:            # arbitrary name for the security scheme
      type: http
      scheme: bearer
  responses:
    UnauthorizedError:
      description: Access token is missing or invalid
    InternalServerError:
      description: |-
        The server encountered an internal error.
  schemas:
    mydatetime:
      title: Ubiquitous date time
      description: |-
        Since even the ISO8601 format may be misleading 
        with regards on how the date time is represented,
        and since the user is not giving the server any
        date time, i hereby declare that the server will only
        serve datetimes in the 'YYYY-MM-DD hh:mm:ss' format on zulu time (+00:00),
        the client will see (hopefully) their converted time of course.
        (Because of SQLite's way of serving timestamps,
        the format was changed from the previous 'YYYY-MM-DDThh:mm')
      type: string
      format: date-time
      minLength: 19
      maxLength: 19
    authtoken:
      title: User authorization token
      description: |-
        A user's "authorization token", created at registration and shared at login to the user, is meant to be unique and never change (will probably be a unique random number created by the server).
      type: integer
      format: int64
      example: 9267501
    username:
      title: User name
      description: |-
        RegEx definition of an acceptable username,
        aka almost anything. (Thanks prof for the idea to use regexes)
        Can change in time (is NOT the same as the handle!).
      type: string
      example: Davide Marincione
      pattern: '^.{4,32}$'
      minLength: 4
      maxLength: 32
    userhandle:
      title: User handle
      description: |-
        The user's handle, public for linking and general purposes with respect to other users,
        created by the user at registration (and used to login).
        Is meant to never change (unlike the username) and be unique.
        Is meant to be of the form <1-27 chars>#<4-nums>.
        (Btw, inspired from existing videogame naming schemes)
      type: string
      pattern: '^.{1,27}#\d{4}$'
      example: "davide#7734"
      minLength: 6
      maxLength: 32
    userhandlexdate:
      title: User handle and a date
      description: |-
        Same stuff as the user handle, but it may be useful to return it with a date (for likes for example).
      type: object
      properties:
        handle:
          $ref: "#/components/schemas/userhandle"
        relevantdate:
          $ref: "#/components/schemas/mydatetime"
    handlesxdatebatch:
      title: Batch of handles with dates
      description: |-
        Since a list of handles is useful in situations
        where arbitrary number of users may be listed
        (such as to return list of followers,
        a following, banned users or those who've
        put a like on a photo) but, at the same time,
        arbitrarily long lists are unacceptable, it is
        paramount to produce and handle (no pun intended)
        arbitrary lists of users via fixed size batches.
        The idea being that, since in no case we need to
        produce lists of handles in a particular order, we 
        decree they will be handled via lexicographic
        order for semplicity.

        It is assumed that any request for this kind of
        batches will either:
    
          a. Request with a "base", leading to a response
          containing handles whose values are strictly larger
          than the "base".
  
          b. Request with no "base", leading to a response
          containing handles whose values are the smallest.
      
        For every case of handling lists of userhandles it is
        assumed that, from the client side, the "base" will
        be set equal to the last element in the list received
        for the same functionality.

        Last detail is that, since the client will likely cache the
        elements of the list to save on network usage, the final
        list may not reflect the actual state on the server-
        this is an acceptable compromise.
      type: array
      items:
        $ref: "#/components/schemas/userhandlexdate"
      minItems: 0
      maxItems: 64

    rawphoto:
      title: Photo representation
      description: |-
        How a photo is represented in this application,
        will probably change in the future versions.
      type: string
      format: binary
      minLength: 0        # Uhhh... what is the smallest size for an image?
      maxLength: 52428800 # 50 MiB
    photoid:
      title: Photo identifier
      description: |-
        This is a global and unique incremental value
      type: integer
      format: int64
      example: 1
    title:
      title: Photo title
      description: |-
        The title's regex
      example: A curious title
      type: string
      pattern: '^.{4,64}$'
      minLength: 4
      maxLength: 64
    photosbatch:
      title: Batch of photo ids
      description: |-
        Like the situation with lists of userhandles,
        an arbitrary sized list of photo ids may be
        useful to handle a user's stream or the view
        of a profile- since photo ids are distributed
        in a unique incremental fashion, which conviniently
        follows the reverse chronological order, we can order
        them by their descending value.

        Therefore it is assumed that any request for this
        kind of batches will either:

          a. Request with a "limit", leading to a response
          containing a batch of elements whose values
          are strictly smaller than the "limit".

          b. Request with no "limit", leading to a response
          containing a batch of ids whose values are the biggest.

        For any case of handling lists of photo ids it is assumed
        that, from the client side, the "limit" will be set equal
        to the last element in the list received for the same
        functionality.

        Like the problem with live-updating the list in the
        user handles, we have to accept an half-measure where
        the list may not fully represent the server state-
        this, again, is an acceptable compromise.
      type: array
      items:
        $ref: "#/components/schemas/photoid"
      minItems: 0
      maxItems: 64
    
    commentid:
      title: Comment identifier
      description: This is an incremental value local to a photo
      example: 1
      type: integer
      format: int64
    text:
      title: Comment's Text
      description: A comment, it must be not longer than 256 characters.
      example: What a nice doggo!
      type: string
      pattern: ^.+$
      minLength: 1
      maxLength: 256
    comment:
      title: Comment
      description: A user's comment under a photo
      type: object
      properties:
        comment-text:
          $ref: "#/components/schemas/text"
        comment-author:
          $ref: "#/components/schemas/userhandle"
        comment-date:
          $ref: "#/components/schemas/mydatetime"
        comment-id:
          $ref: "#/components/schemas/commentid"
    commentsbatch:
      title: Batch of comments
      description: |-
        Under photos an arbitrary number of comments
        may be generated, therefore it is needed
        to handle them through batches: like the photo ids,
        since we are interested in the reverse
        chronological order of the comments, which is "conviniently"
        equal to a unique incremental numbering of them,
        we'll handle comments by their descending ids.

        Differently than photos, a list 
        of comments will contain actual comments in their
        full representation instead of their simple ids.

        Therefore it is assumed that any request for this
        kind of batches will either:

          a. Request with a "limit", leading to a response
          containing a batch of elements whose values
          are strictly smaller than the "limit".

          b. Request with no "limit", leading to a response
          containing a batch of ids whose values are the biggest.

        For any case of handling lists of comments it is assumed
        that, from the client side, the "limit" will be set equal
        to the last element in the list received for the same
        functionality.

        Again, we make the compromise with live-udpates on the server.
      
      type: array
      items:
        $ref: "#/components/schemas/comment"
      minItems: 0
      maxItems: 64
  
    photo:
      title: Whole photo
      description: The response to a photo request
      type: object
      properties:
        photo-title:
          $ref: "#/components/schemas/title"
        photo-author:
          $ref: "#/components/schemas/userhandle"
        comments-running-batch:
          $ref: "#/components/schemas/commentsbatch"
        likes-running-batch:
          $ref: "#/components/schemas/handlesxdatebatch"
        photo-date:
          $ref: "#/components/schemas/mydatetime"
  
    profile:
      title: Profile
      description: The response to a profile request
      type: object
      properties:
        photos-running-batch:
          $ref: "#/components/schemas/photosbatch"
        followers-running-batch:
          $ref: "#/components/schemas/handlesxdatebatch"
        following-running-batch:
          $ref: "#/components/schemas/handlesxdatebatch"

    loginresponse:
      title: Login response
      description: |-
        The response to a login, with both the handle, the username
        and the authtoken. For good measure
      type: object
      properties:
        resp-username:
          $ref: "#/components/schemas/username"
        resp-userhandle:
          $ref: "#/components/schemas/userhandle"
        resp-authtoken:
          $ref: "#/components/schemas/authtoken"
  
paths:
  /users:
    post:
      tags: ["user"]
      summary: Logs in the user
      description: |-
        If the user does not exist, it will be created,
        and an auth token is returned.
        If the user exists, the user auth. token is returned.
      operationId: doLogin
      parameters:
        - in: query
          name: user-handle
          schema:
            $ref: "#/components/schemas/userhandle"
          required: true
      responses:
        '200':
          description: User log-in action successful
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/loginresponse"
        '201':
          description: User log-in (registration) action successful
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/loginresponse"
        '400':
          description: Unacceptable username
        '500':
          $ref: '#/components/responses/InternalServerError'
    get:
      security:
      - bearerAuth: []
      tags: ["user"]
      summary: Get user profile
      description: |-
        Requests a user's profile via its username, the auth token is needed
        since the requesting user may be blocked by the other.
      parameters:
        - in: query
          name: user-name
          schema:
            $ref: "#/components/schemas/username"
          required: true
        - in: query
          name: photos-limit
          schema:
            $ref: "#/components/schemas/photoid"
          required: false
        - in: query
          name: followers-base
          schema:
            $ref: "#/components/schemas/userhandle"
          required: false
        - in: query
          name: following-base
          schema:
            $ref: "#/components/schemas/userhandle"
          required: false
      operationId: getUserProfile
      responses:
        '200':
          description: Returning user's profile
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/profile"
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          description: User not found
        '500':
          $ref: '#/components/responses/InternalServerError'
  /users/{user-handle}:
    parameters:
      - in: path
        name: user-handle
        schema:
          $ref: "#/components/schemas/userhandle"
        required: true
    put:
      security:
      - bearerAuth: []
      tags: ["user"]
      summary: Modify username
      description: |-
        Modifies the user name (if the new one is available)
      operationId: setMyUserName
      requestBody:
        content:
            application/json:
              schema:
                $ref: "#/components/schemas/username"
        required: true
      responses:
        '204':
          description: Username change successful
        '400':
          description: Unacceptable username
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          description: User not found
        '500':
          $ref: '#/components/responses/InternalServerError'
  /users/{user-handle}/follows/{other-handle}:
    parameters:
      - in: path
        name: user-handle
        schema:
          $ref: "#/components/schemas/userhandle"
        required: true
      - in: path
        name: other-handle
        schema:
          $ref: "#/components/schemas/userhandle"
        required: true
    put:
      security:
      - bearerAuth: []
      tags: ["user"]
      summary: Follow user
      description: |-
        Follows user if it is not followed (cannot follow self)
      operationId: followUser
      responses:
        '204':
          description: Follow successful
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          description: Other or This user not found
        '409':
          description: Cannot follow self
        '500':
          $ref: '#/components/responses/InternalServerError'
    delete:
      security:
      - bearerAuth: []
      tags: ["user"]
      summary: Un-follow user
      description: |-
        Un-follows user if it is followed (returns successful even when other user wasn't
        followed in the first place)
      operationId: unfollowUser
      responses:
        '204':
          description: Unfollow successful
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          description: Other or This user not found
        '500':
          $ref: '#/components/responses/InternalServerError'
  /users/{user-handle}/bans/{other-handle}:
    parameters:
      - in: path
        name: user-handle
        schema:
          $ref: "#/components/schemas/userhandle"
        required: true
      - in: path
        name: other-handle
        schema:
          $ref: "#/components/schemas/userhandle"
        required: true
    put:
      security:
      - bearerAuth: []      
      tags: ["user"]
      summary: Ban user
      description: |-
        Bans user if it is not yet banned (cannot ban self)
      operationId: banUser
      responses:
        '204':
          description: Ban successful
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          description: Other or This user not found
        '409':
          description: Cannot ban self
        '500':
          $ref: '#/components/responses/InternalServerError'
    delete:
      security:
      - bearerAuth: []  
      tags: ["user"]
      summary: Un-ban user
      description: |-
        Un-bans user if it is banned (returns successful even when other user wasn't
        banned in the first place)
      operationId: unbanUser
      responses:
        '204':
          description: Unban successful
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          description: Other user not found
        '500':
          $ref: '#/components/responses/InternalServerError'
  /users/{user-handle}/stream:
    parameters:
      - in: path
        name: user-handle
        schema:
          $ref: "#/components/schemas/userhandle"
        required: true
    get:
      security:
      - bearerAuth: []  
      tags: ["stream"]
      summary: Receive stream
      description: |-
        Receive the user's stream filled with info from the people they follow
      operationId: getMyStream
      parameters:
        - in: query
          name: photos-limit
          schema:
            $ref: "#/components/schemas/photoid"
          required: false
      responses:
        '200':
          description: Here's your stream!
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/photosbatch"
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          description: User not found
        '500':
          $ref: '#/components/responses/InternalServerError'
  /photos:
    post:
      security:
      - bearerAuth: []  
      tags: ["photo"]
      summary: Post a photo
      description: |-
        Create a post and receive its unique id.
      operationId: uploadPhoto
      requestBody:
        content:
          multipart/form-data:
            schema:
              description: |-
                A photo upload, the author and the datetime is inserted by
                the server, therefore only the title and the photo are requested.
              type: object
              properties:
                title:
                  $ref: "#/components/schemas/title"
                photo:
                  $ref: "#/components/schemas/rawphoto"
            encoding:
              photo:
                contentType: image/png, image/jpeg, image/webp, image/gif, image/bmp
        required: true
      responses:
        '201':
          description: Successful photo post
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/photoid"
        '400':
          description: Unacceptable title or otherwise malformed request
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '413':
          description: Photo is too big!
        '415':
          description: Given image format is unsupported
        '500':
          $ref: '#/components/responses/InternalServerError'
  /photos/{photo-id}:
    parameters:
      - in: path
        name: photo-id
        schema:
          $ref: "#/components/schemas/photoid"
        required: true
    delete:
      security:
      - bearerAuth: []
      tags: ["photo"]
      summary: Delete photo
      description: |-
        Delete a photo and all of its relative resources (comments, likes, etc.)
      operationId: deletePhoto
      responses:
        '204':
          description: Photo removal successful
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          description: Photo not found
        '500':
          $ref: '#/components/responses/InternalServerError'
    get:
      security:
      - bearerAuth: []
      tags: ["photo"]
      summary: Get a whole photo post and info
      description: |-
        Requests a photo and all its related stuff:
        like the author, the likes, the comments, etc.
      parameters:
        - in: query
          name: comments-limit
          schema:
            $ref: "#/components/schemas/commentid"
          required: false
        - in: query
          name: likes-base
          schema:
            $ref: "#/components/schemas/userhandle"
          required: false
      operationId: getPhotoPost
      responses:
        '200':
          description: Returning photo post
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/photo"
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          description: User not found
        '500':
          $ref: '#/components/responses/InternalServerError'
  /photos/{photo-id}/raw:
    parameters:
      - in: path
        name: photo-id
        schema:
          $ref: "#/components/schemas/photoid"
        required: true
    get:
      security:
      - bearerAuth: []
      tags: ["photo"]
      summary: Get the actual photo
      description: |-
        Gets the actual photo
      operationId: getRawPhoto
      responses:
        '200':
          description: Here's the photo
          content:
            image/png:
              schema:
                $ref: "#/components/schemas/rawphoto"
            image/jpeg:
              schema:
                $ref: "#/components/schemas/rawphoto"
            image/webp:
              schema:
                $ref: "#/components/schemas/rawphoto"
            image/gif:
              schema:
                $ref: "#/components/schemas/rawphoto"
            image/bmp:
              schema:
                $ref: "#/components/schemas/rawphoto"
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          description: Photo not found
        '500':
          $ref: '#/components/responses/InternalServerError'
  /photos/{photo-id}/likes/{user-handle}:
    parameters:
      - in: path
        name: photo-id
        schema:
          $ref: "#/components/schemas/photoid"
        required: true
      - in: path
        name: user-handle
        schema:
          $ref: "#/components/schemas/userhandle"
        required: true
    put:
      security:
      - bearerAuth: []      
      tags: ["photo"]
      summary: Like photo
      description: |-
        Put like on a photo (not on yours of course)
      operationId: likePhoto
      responses:
        '204':
          description: Successful like
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          description: Photo or User not found
        '409':
          description: Cannot like own photo
        '500':
          $ref: '#/components/responses/InternalServerError'
    delete:
      security:
      - bearerAuth: []
      tags: ["photo"]
      summary: Un-like photo
      description: |-
        Remove like from a photo (returns successful even when a like wasn't present
        in the first place)
      operationId: unlikePhoto
      responses:
        '204':
          description: Successful removal
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          description: Photo or User not found
        '500':
          $ref: '#/components/responses/InternalServerError'
  /photos/{photo-id}/comments:
    parameters:
      - in: path
        name: photo-id
        schema:
          $ref: "#/components/schemas/photoid"
        required: true
    post:
      security:
      - bearerAuth: []
      tags: ["photo"]
      summary: Comment photo
      description: |-
        Adds a comment under a photo, if the user isn't banned by the author
      operationId: commentPhoto
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/text"
        required: true
      responses:
        '201':
          description: Comment successful
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/commentid"
        '400':
          description: Comment is unacceptable
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          description: Photo not found
        '500':
          $ref: '#/components/responses/InternalServerError'

  /photos/{photo-id}/comments/{comment-id}:
    parameters:
      - in: path
        name: photo-id
        schema:
          $ref: "#/components/schemas/photoid"
        required: true
      - in: path
        name: comment-id
        schema:
          $ref: "#/components/schemas/commentid"
        required: true
    delete:
      security:
      - bearerAuth: []
      tags: ["photo"]
      summary: Delete comment
      description: |-
        Deletes a comment from a photo's post, returns 404 error if the comment is not found (unlike likes, follows and bans!)
      operationId: uncommentPhoto
      responses:
        '204':
          description: Comment delete successful
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          description: Comment or Photo not found
        '500':
          $ref: '#/components/responses/InternalServerError'