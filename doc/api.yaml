openapi: '3.0.2'
info:
  title: WASAPhoto
  description: |-
    This is Davide Marincione's API for his WASAPhoto implementation
  version: '1.0.0'
servers:
  - url: http://localhost/
components:
  securitySchemes:
    bearerAuth:            # arbitrary name for the security scheme
      type: http
      scheme: bearer
  responses:
    UnauthorizedError:
      description: Access token is missing or invalid
    InternalServerError:
      description: |-
        The server encountered an internal error.
  schemas:
    sha256:
      description: RegEx of a valid sha256 hash value
      example: ed5cbb86c4f4dfcd294c820015cd2c7efb69ba0bd43ed8de743186e34af8c01b
      type: string
      pattern: "[A-Fa-f0-9]{64}"
    userid:
      title: User identifier
      description: The user identifier, public for linking and general purposes with respect to other users
      type: integer
      format: int64
      example: 12345678
    safetytoken:
      title: User safety token
      description: |-
        A user's "safety token", created at registration with its first
        name on the site, the server's date-time of the registration
        and some random salt decided by me (probably "42").
      $ref: "#/components/schemas/sha256"
    username:
      title: User name
      description: |-
        RegEx definition of an acceptable username,
        aka anything but "\n". (Thanks prof for the regex)
      type: string
      example: Maria
      pattern: '^.*?$'
      minLength: 4
      maxLength: 32
    rawphoto:
      title: Photo representation
      description: |-
        How a photo is represented in this application,
        will probably change in the future versions
      type: string
      format: binary
      maxLength: 52428800 # 50 MiB
    title:
      title: Photo title
      description: |-
        The title cannot have "\n" inside, therefore
        we borrow the regex for names.
      example: A curious title
      type: string
      pattern: '^.*?$'
      minLength: 4
      maxLength: 64
    photoid:
      title: Photo identifier
      description: |-
        This can be an incremental value
      type: integer
      format: int64
      example: 12345678
    photo:
      title: Photo post
      description: |-
        A post of a user's photo
      type: object
      properties:
        date:
          type: string
          format: date-time
        photo:
          $ref: "#/components/schemas/rawphoto"
        title:
          $ref: "#/components/schemas/title"
        author:
          $ref: "#/components/schemas/username"
    text:
      title: Comment's Text
      example: What a nice doggo!
      type: string
      minLength: 1
      maxLength: 256
    commentid:
      title: Comment identifier
      description: This can be an incremental value
      example: 1
      type: integer
      format: int64
    comment:
      title: Comment
      description: A user's comment under a photo
      type: object
      properties:
        text:
          $ref: "#/components/schemas/text"
        author:
          $ref: "#/components/schemas/username"
        date:
          type: string
          format: date-time
    post:
      title: A whole post
      description: The representation of a full post
      type: object
      properties:
        photo:
          $ref: "#/components/schemas/photo"
        comments:
          type: array
          items:
            $ref: "#/components/schemas/comment"
        likes:
          type: array
          items:
            $ref: "#/components/schemas/username"
paths:
  /users:
    post:
      tags: ["user"]
      summary: Logs in the user
      description: |-
        If the user does not exist, it will be created,
        and an identifier is returned.
        If the user exists, the user identifier is returned.
      operationId: doLogin
      parameters:
        - in: query
          name: username
          schema:
            $ref: "#/components/schemas/username"
          required: true
      responses:
        '200':
          description: User log-in action successful
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/safetytoken"
        '201':
          description: User log-in (registration) action successful
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/safetytoken"
        '400':
          description: Unacceptable username
        '500':
          $ref: '#/components/responses/InternalServerError'
    get:
      security:
      - bearerAuth: []
      tags: ["user"]
      summary: Get user profile
      description: |-
        Requests a user's profile via its username, the safety token is needed
        since the requesting user may be blocked by the other.
      parameters:
        - in: header
          name: token
          schema:
            $ref: "#/components/schemas/safetytoken"
          required: true
        - in: query
          name: username
          schema:
            $ref: "#/components/schemas/username"
          required: true
      operationId: getUserProfile
      responses:
        '200':
          description: Returning user's profile
          # TODO (?): maybe make this a bit more lightweight!
          content:
            application/json:
              schema:
                type: object
                properties:
                  photos:
                    type: array
                    items:
                      $ref: "#/components/schemas/post"
                  followers:
                    type: array
                    items:
                      $ref: "#/components/schemas/userid"
                  following:
                    type: array
                    items:
                      $ref: "#/components/schemas/userid"
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          description: User not found
        '500':
          $ref: '#/components/responses/InternalServerError'
  /users/{userid}:
    parameters:
      - in: header
        name: token
        schema:
          $ref: "#/components/schemas/safetytoken"
        required: true
      - in: path
        name: userid
        schema:
          $ref: "#/components/schemas/userid"
        required: true
    put:
      security:
      - bearerAuth: []
      tags: ["user"]
      summary: Modify username
      description: |-
        Modifies the user name (if the new one is available)
      operationId: setMyUserName
      parameters:
        - in: header
          name: new-username
          schema:
            $ref: "#/components/schemas/username"
          required: true
      responses:
        '200':
          description: Username change successful
        '400':
          description: Unacceptable username
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          description: User not found
        '500':
          $ref: '#/components/responses/InternalServerError'
  /users/{userid}/follows/{otherid}:
    parameters:
      - in: header
        name: token
        schema:
          $ref: "#/components/schemas/safetytoken"
        required: true
      - in: path
        name: userid
        schema:
          $ref: "#/components/schemas/userid"
        required: true
      - in: path
        name: otherid
        schema:
          $ref: "#/components/schemas/userid"
        required: true
    put:
      security:
      - bearerAuth: []
      tags: ["user"]
      summary: Follow user
      description: |-
        Follows user if it is not followed (cannot follow self)
      operationId: followUser
      responses:
        '200':
          description: Follow successful
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          description: Other or This user not found
        '409':
          description: Cannot follow self
        '500':
          $ref: '#/components/responses/InternalServerError'
    delete:
      security:
      - bearerAuth: []
      tags: ["user"]
      summary: Un-follow user
      description: |-
        Un-follows user if it is followed (returns successful even when other user wasn't
        followed in the first place)
      operationId: unfollowUser
      responses:
        '200':
          description: Unfollow successful
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          description: Other or This user not found
        '500':
          $ref: '#/components/responses/InternalServerError'
  /users/{userid}/bans/{otherid}:
    parameters:
      - in: header
        name: token
        schema:
          $ref: "#/components/schemas/safetytoken"
        required: true
      - in: path
        name: userid
        schema:
          $ref: "#/components/schemas/userid"
        required: true
      - in: path
        name: otherid
        schema:
          $ref: "#/components/schemas/userid"
        required: true
    put:
      security:
      - bearerAuth: []      
      tags: ["user"]
      summary: Ban user
      description: |-
        Bans user if it is not yet banned (cannot ban self)
      operationId: banUser
      responses:
        '200':
          description: Ban successful
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          description: Other or This user not found
        '409':
          description: Cannot ban self
        '500':
          $ref: '#/components/responses/InternalServerError'
    delete:
      security:
      - bearerAuth: []  
      tags: ["user"]
      summary: Un-ban user
      description: |-
        Un-bans user if it is banned (returns successful even when other user wasn't
        banned in the first place)
      operationId: unbanUser
      responses:
        '200':
          description: Unban successful
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          description: Other user not found
        '500':
          $ref: '#/components/responses/InternalServerError'
  /users/{userid}/stream:
    parameters:
      - in: header
        name: token
        schema:
          $ref: "#/components/schemas/safetytoken"
        required: true
      - in: path
        name: userid
        schema:
          $ref: "#/components/schemas/userid"
        required: true
    get:
      security:
      - bearerAuth: []  
      tags: ["stream"]
      summary: Receive stream
      description: |-
        Receive the user's stream filled with info from the people they follow
      operationId: getMyStream
      responses:
        '200':
          description: Here's your stream!
          # TODO (?): make this more lightweight too?
          content:
            application/json:
              schema:
                type: object
                properties:
                  photos:
                    type: array
                    items:
                      $ref: "#/components/schemas/post"
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          description: User not found
        '500':
          $ref: '#/components/responses/InternalServerError'
  /photos:
    parameters:
      - in: header
        name: token
        schema:
          $ref: "#/components/schemas/safetytoken"
        required: true
    post:
      security:
      - bearerAuth: []  
      tags: ["photo"]
      summary: Post a photo
      description: |-
        Create a post and receive its unique id.
      operationId: uploadPhoto
      parameters:
        - in: header
          name: photo
          schema:
            type: object
            properties:
              title:
                $ref: "#/components/schemas/title"
              photo:
                $ref: "#/components/schemas/rawphoto"
          required: true
      responses:
        '201':
          description: Successful photo post
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/photoid"
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '413':
          description: Photo is too big!
        '500':
          $ref: '#/components/responses/InternalServerError'
  /photos/{photo-id}:
    parameters:
      - in: path
        name: photo-id
        schema:
          $ref: "#/components/schemas/photoid"
        required: true
      - in: header
        name: token
        schema:
          $ref: "#/components/schemas/safetytoken"
        required: true
    delete:
      security:
      - bearerAuth: []
      tags: ["photo"]
      summary: Delete photo
      description: |-
        Delete a photo and all of its relative resources (comments, likes, etc.)
      operationId: deletePhoto
      responses:
        '200':
          description: Photo removal successful
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          description: Photo not found
        '500':
          $ref: '#/components/responses/InternalServerError'
  /photos/{photo-id}/likes/{userid}:
    parameters:
      - in: path
        name: photo-id
        schema:
          $ref: "#/components/schemas/photoid"
        required: true
      - in: path
        name: userid
        schema:
          $ref: "#/components/schemas/userid"
        required: true
      - in: header
        name: token
        schema:
          $ref: "#/components/schemas/safetytoken"
        required: true
    put:
      security:
      - bearerAuth: []      
      tags: ["photo"]
      summary: Like photo
      description: |-
        Put like on a photo (not on yours of course)
      operationId: likePhoto
      responses:
        '200':
          description: Successful like
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          description: Photo or User not found
        '409':
          description: Cannot like own photo
        '500':
          $ref: '#/components/responses/InternalServerError'
    delete:
      security:
      - bearerAuth: []
      tags: ["photo"]
      summary: Un-like photo
      description: |-
        Remove like from a photo (returns successful even when a like wasn't present
        in the first place)
      operationId: unlikePhoto
      responses:
        '200':
          description: Successful removal
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          description: Photo or User not found
        '500':
          $ref: '#/components/responses/InternalServerError'
  /photos/{photo-id}/comments:
    parameters:
      - in: path
        name: photo-id
        schema:
          $ref: "#/components/schemas/photoid"
        required: true
      - in: header
        name: token
        schema:
          $ref: "#/components/schemas/safetytoken"
        required: true
    post:
      security:
      - bearerAuth: []
      tags: ["photo"]
      summary: Comment photo
      description: |-
        Adds a comment under a photo, if the user isn't banned by the author
      operationId: commentPhoto
      parameters:
      - in: header
        name: text
        schema:
          $ref: "#/components/schemas/text"
        required: true
      responses:
        '201':
          description: Comment successful
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/commentid"
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          description: Photo not found
        '500':
          $ref: '#/components/responses/InternalServerError'

  /photos/{photo-id}/comments/{comment-id}:
    parameters:
      - in: path
        name: photo-id
        schema:
          $ref: "#/components/schemas/photoid"
        required: true
      - in: path
        name: comment-id
        schema:
          $ref: "#/components/schemas/commentid"
        required: true
      - in: header
        name: token
        schema:
          $ref: "#/components/schemas/safetytoken"
        required: true
    delete:
      security:
      - bearerAuth: []
      tags: ["photo"]
      summary: Delete comment
      description: |-
        Deletes a comment from a photo's post, returns 404 error if the comment is not found (unlike likes, follows and bans!)
      operationId: uncommentPhoto
      responses:
        '200':
          description: Comment delete successful
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          description: Comment or Photo not found
        '500':
          $ref: '#/components/responses/InternalServerError'